#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "ykutils"
require 'yaml'
require 'find'
class Erubyxcli
  def initialize(yaml_path)
    #p "yaml_path=#{yaml_path}"
    yaml_pn = Pathname.new(yaml_path).cleanpath
    @virtual_domain_dir_pn = yaml_pn.parent
    @server_dir_pn = @virtual_domain_dir_pn.parent
    @common_dir_pn = @server_dir_pn.parent
    @hash = YAML.load_file(yaml_pn)
    #p @hash
    @root = @hash["_root"]
    #p @root
    root_template_0_pn = Pathname.new(@root["template"]).cleanpath
    @root_template_pn = @common_dir_pn + root_template_0_pn
    # puts "@root_template_pn=#{@root_template_pn}"
  end

  def extract(scope)
    hashx = {}
    @hash.each do |k, v|
      if k !~ /^_/
        # puts k
        #puts v
        pn = Pathname.new(v["template"]).cleanpath
        #Pathname.new(v).cleanpath
        template_pn = @server_dir_pn + pn
        # puts(template_pn)
        value_file_path_array = v["value"].map{|x|
          @virtual_domain_dir_pn + Pathname.new(x).cleanpath
        }
        hashx[k] = Ykutils::Erubyx::erubi_render_with_file(template_pn, scope, value_file_path_array)
      end
    end

    template = File.read(@root_template_pn)
    template_hash = { TEMPLATE: template,
      OBJ: nil
    }

    Ykutils::Erubyx::erubi_render(template_hash, scope, hashx)
  end
end

file_list = []
Find.find("test_data"){|x|
  if x =~ /base.yml$/
      #puts x
      file_list << x
      Find.prune
  end
}
# yaml_path = ARGV[0]
file_list.map{ |fname|
  parent_dir_pn = Pathname.new(fname).cleanpath.parent
  vdomain = parent_dir_pn.basename
  output_fname = "#{vdomain}.conf"
  cli = Erubyxcli.new(fname)
  scope = nil
  File.open( output_fname, "w"){|f|
    p output_fname
    x = cli.extract(scope)
    f.write(x)
  }
}
